▷ MVC 패턴이란?
   애플리케이션 개발을 MVC(Model-View-Controller) 로 구분하여 각 역할에 맞게 코드를 작성하는 방식.

▶ MVC 구성 요소 
   1) Model : 데이터베이스와의 상호 작용하며 결과 데이터를 클라이언트에게 돌려줄 때 사용.
   2) View : 사용자에게 보여지는 화면, 모델 데이터를 표시하고 입력을 받는 역할을 함.
   3) Controller : 사용자 입력을 처리하고 모델과 뷰를 연결. 모델을 업데이트하고 뷰를 선택 함.

▶ MVC 1
   MVC1 패턴이란, 요청의 처리 결과를 DB로 부터 받은 Model 객체를 JSP 페이지(View)에 담아 응답을 보내는 패턴.
   JSP가 View와 Controller 역할을 모두 담당하기 때문에 JSP 페이지 내에 너무 많은 코드가 들어가 가독성이 떨어짐.

   ※ .jsp 는 html 안에 java 코드를 작성할 수 있게끔 해준다.


      ---> 
   클라이언트       View(Controller) <--> Model <--> DB
      <---

▶ MVC 2
   MVC1 패턴에 Front Controller 가 추가된 형태

   Front Controller : MVC 2 의 핵심, 모든 요청을 중앙 집중식으로 처리.

   1) 사용자의 모든 요청이 Front controller 로 들어옴
   2) 요청을 분석하고 적절한 컨트롤러에 전달
   3) 컨트롤러는 비즈니스 로직을 수행하고 모델을 업데이트한 후 결과를 뷰에 전달!
   4) Front Controller 는 최종적으로 뷰를 렌더링하여 사용자에게 응답을 반환.

▶ Spring MVC
   스프링 프레임워크에서 MVC 2 모델을 좀 더 발전 시킨 형태.

   1) 클라이언트가 서버에 요청을 하면, Front Controller인 DispatcherServlet 클래스가 요청을 받는다.
   2) DispatcherServlet은 HandlerMapping 에게 요청이 들어온 uri 와 매핑되는 컨트롤러 검색 요청!, 찾으면 반환!
   3) 반환 받은 컨트롤러로 클라이언트의 요청 처리를 요청!
   4) Controller 는 비즈니스 로직을 수행한 후 결과를 반환!
   5) 반환하는 html이 있다면 ViewResolver 에게 html을 찾아달라고 요청! 찾으면 반환!
   6) 최종적으로 DispatcherServlet이 응답할 View 의 랜더를 지시!
   7) 최종 랜더링 후 마무리!



⏭ 스프링 특징 
▶ IOC란 (inversion of Control, 제어의 역전)
	순수 자바프로젝트에서 생성할 때는 객체가 필요한 곳에 개발자가 직접 생성했다.
	제어의 역전은 다른 객체를 개발자가 직접 생성하거나 제어하는 것이 아니라 
	외부에서 관리하는 객체를 가져와 사용하는 것을 말함 
   	스프링에서는 스프링 컨테이너가 객체를 관리, 제공하는 역활을 한다 

▶ DI란?? (Dependency Injection, 의존성 주입)
	제어의 역전을 구현하기 위해 사용하는 방법 
	 의존성 주입이란 다른 클래스에 의존한다는 뜻 

	의존 : A객체가 B객체 없이 동작이 불가능한 상황을 'A가 B에 의존적이다'라고 표현한다
	주입 
		어떤 객체가 필요로하는 객체를 외부에서 밀어 넣는 것을 의미 
		주입을 받는 입장에서는 어떤 객체인지 신경 쓸 필요가 없고 어떤 객체의 의존하든 자신의 역활은 변하지 않는다 

	그런데 우리가 생각했을 때 A클래스에서 B클래스 안에 있는 메소드를 사용하기 위해서는 B클래스의 정보를 메모리에 올리고
	즉 객체를 만들어서 해당 위치에 있는 필드에 접근 할 수 있었다 
	근데 문법을 살펴보면 생성자를 호출하는 문법 자체가 없ㅎ다 메모리에 할당이 되지 않았는데 필드를 사용할 수 있는 것은 말이 안된다 
	하지만 동작이 잘되는 이유는 스프링 컨테이너에서 객체를 주입했기 때문 
	스프링의 경우 클래스 A에서 B객체를 쓰고 싶은 경우 객체를 직접 생성하는 것이 아니라 
	스프링 컨테이너에서 객체를 주입받아 사용한다
 
	※  DI를 사용하면 클래스는 자신의 의존성을 생성자를 호출하여 생성하지 않고, 외부에서 주입 받는다 
	이는 클래스가 구체적인 구현에 의존하지 않고 인터페이스에 의존하게 되어 의존성 주입의 대상이 바뀌더라도 
	클래스 자체는 수정할 필요가 없어진다. 이로 인해 클래스 간의 결합도가 낮아진다

▶ 스프링 컨테이너 
	스프링 컨테이너는 빈을 생성하고 관리한다
	빈이 생성되고 소멸되기까지의 라이프 싸이클 관리 !
	그리고@Autowired 같은 어노테이션을 사용해 빈을 주입받을 수 있다 

▶ 빈 (Bean)
	
















