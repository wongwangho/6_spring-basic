▶ 서버란 ?
	클라이언트의 요청을 처리하고 응답을 해주는 일련의 과정이 이루어지는 공간
	데이터만 달라고 요청하면 데이터만 주고, 러히만 해달라고 하면 처리만 해주고 등등 요청대로 수행한다
	우리가 주소창에 입력하는 것이 데이터를 요청한다고 생각하면 된다 
	
▶ 포트란 ?
	아이피는 컴퓨터를 식별하는 주소 때문에 아이피를 알면 서버를 찾을 수 있다 
	하지만 포트까지 알아야 제대로된 서비스를 찾을 수 있다 

	ex)아이피가 대형 마트라면 포트가 각각의 매대라고 생각하기 
	우리가 흔히 보는 url, 주소창에 있는 것들에도 전부 아이피와 포트 번호가 들어가지만, 우리는 확인할 수 없다 
	그 이유는 아이피와 포트를 쉽게 알아보기 위해 주소를 붙여놨기 때문이다 

▶ 프레임워크란?
	소프트웨어 개발을 쉽게 하기 위한 소프트웨어 개발 환경 
	개개인의 능력에 차이가 있는 개발자들도 같은 환경, 틀 안에서 개발을 하게 되면서 능력의 차이를 줄일 수 있다
	정해진 틀 안에서 개발해야한다는 점은 단점으로 보일 수 있으나, 개발 효율은 상당이 높다

▶ 라이브러리?
	애플리케이션 개발에 필요한 기능인 클래스, 함수 등을 모아놓은 코드의 모음 
	라이브러리를 추가만 한다면 복잡한 코드를 직접 작성하지 않고도 원하는 기능을 사용할 수 있기에 
	개발도 편해지고 개발 속도도 빨라진다 
	또한 라이브러리는 독립적이기 때문에 서로 영향을 주지 않는다 


   ※ 프레임워크는 프로젝트의 전체적인 구조를 잡아주기 위해 사용하고 
      라이브러리는 개발을 하는 과정에서 기능 및 서비스를 구현하기 위해 사용한다 

▶스프링 프레임워크 (경량 (모듈) 프레임워크)
	자바 기반의 엔터프라이즈 애플리케이션 개발을 위한 프레임워크 	
	애플리케이션의 안정성, 서버 성능 , 보안 등을 제공해주는 도구 
	개발자들이 비즈니스 로직에만 집중할 수 있도록 도와준다
	장점이 많지만 설정이 매우 복잡하다 

▶ 스프링 부트 
	스프링 프레임워크를 더 쉽고 빠르게 이용할 수 있도록 만들어주는 도구 
	개발자가 좀 더 비즈니스 로직 개발에만 집중할 수ㅜ 있도록 만들어주는 도구 
	스프링 프레임워크 속에 속한 도구 .

▶ 스프링 프레임워크와 스프링 부트의 차이 
	1) 개발 환경 설정 
		- 스프링 프레임워크는 개발 환경을 수동으로 구성 
		- 스프링 부트는 거의 모든 기능을 자동으로 로드, 개발 환경도 따로 구성할 필요가 없다 

	2) WAS (web Application Server)
		- 스프링 프레임워크는 프로젝트 실행에 필요한 서버를 별도로 다운 및 수동 설정 
		- 스프링 부트는 내장형 서버를 제공해 별도의 설정이 필요 없음

▶ 빌드 자동화 도구(프로젝트 관리 도구)
	코드를 컴파일해주고, 패키징을 자동화하는 역활을 하는 도구 
	종속성 관리 등 프로젝트의 전반적인 내용을 관리해준다 

	1 ) maven
		- pom.xml 파일에 프로젝트의 종속성, 빌드 설정, 플러그인 등을 정의.
		- 표준화된 구조
		- 큰 프로젝트의 경우 가독성이 떨어진다 
	2 ) gradle
		- 스크립트 파일로 프로젝트의 종속성, 빌드 설정, 플러그인 등을 정의.
		- 유연하고 확장성이 높은 구조
		- 설정이 간결하고 가독성이 좋다 
		- 너무 복잡한 프로젝트라면 오히려 관리하기 힘들 수 있다 
	